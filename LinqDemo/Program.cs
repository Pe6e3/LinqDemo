namespace LinqDemo
{
    public class Program
    {
        public static string[]? task = new string[60];
        public static string[]? result = new string[60];
        // Исходные данные
        public static char C = 'J';
        public static int L = 5;
        public static int D = 7;
        public static int[] S = new int[] { -71, 75, -10, -20, 70, 4, 24, -31, -59, 54, -39, -7, 63, 95, 31, -44, -61, -42, -30, -67, -76, 57, -6, 88, -64, 79, 94, -66, 28, 50 };
        public static string[] A = { "1hat", "2door", "5computer", "sunglasses", "5ocean", "watch", "piano", "guitar", "5shoe", "spoon", "river", "beach", "phone", "camera", "key", "mountain", "book", "cloud", "bottle", "tree", "flower", "car", "house", "moon", "balloon", "pen", "dog", "chair", "cup", "sun" };

        static void Main()
        {
            Solutions();

            ShowInitial();
            for (int i = 1; i <= 58; i++)
            {
                if (i % 15 == 0)
                    ShowInitial();
                Exercise(i);
            }
        }

        public static void Solutions()
        {

            task[1] = "1. Дана целочисленная последовательность, содержащая как положительные, так и отрицательные числа. Вывести ее первый положительный элемент и последний отрицательный элемент.";
            var firstPlus = S.FirstOrDefault(p => p > 0);
            var lastMinus = S.LastOrDefault(p => p < 0);
            result[1] = "First plus = " + firstPlus + " Last Minus = " + lastMinus;


            task[2] = "2. Дана цифра D (однозначное целое число) и целочисленная последовательность S. Вывести первый положительный элемент последовательности S, оканчивающийся цифрой D. Если требуемых элементов в последовательности S нет, то вывести 0";
            result[2] = "";

            task[3] = "3. Дано целое число L (> 0) и строковая последовательность A. Вывести последнюю строку из A, начинающуюся с цифры и имеющую длину L. Если требуемых строк в последовательности A нет, то вывести строку «Not found»";
            result[3] = A.FirstOrDefault(p => p.Length == L && p.StartsWith(L.ToString()));


            task[4] = "4. Дан символ С и строковая последовательность A.Если A содержит единственный элемент, оканчивающийся символом C, то вывести этот элемент; \n" +
                      "если требуемых строк в A нет, то вывести пустую строку; \n" +
                      "если требуемых строк больше одной, то вывести строку «Error». \n" +
                      "Указание.Использовать try-блок для перехвата возможного исключения.";
            result[4] = "";



            task[5] = "5. Дан символ С и строковая последовательность A. \n" +
                      "Найти количество элементов A, которые содержат более одного символа и при этом начинаются и оканчиваются символом C.";
            result[5] = A.Count(p => p.StartsWith(C) && p.EndsWith(C) && p.Length > 1).ToString();



            task[6] = "6. Дана строковая последовательность. \n" +
                      "Найти сумму длин всех строк, входящих в данную последовательность.";
            result[6] = "";



            task[7] = "7. Дана целочисленная последовательность. \n" +
                      "Найти количество ее отрицательных элементов, а также их сумму.";
            result[7] = "Отрицательных чисел: " + S.Count(p => p < 0).ToString() + " Сумма чисел: " + S.Where(p => p < 0).Sum().ToString();



            task[8] = "8. Дана целочисленная последовательность. \n" +
                      "Найти количество ее положительных двузначных элементов, а также их среднее арифметическое (как вещественное число).\n" +
                      "Если требуемые элементы отсутствуют, то дважды вывести 0 (первый раз как целое, второй — как вещественное).";
            result[9] = "";



            task[9] = "9. Дана целочисленная последовательность. \n" +
                      "Вывести ее минимальный положительный элемент или число 0, если последовательность не содержит положительных элементов.";
            result[9] = S.Where(p => p > 0).Min().ToString() ?? "0";



            task[10] = "10. Дано целое число L (> 0) и строковая последовательность A. Строки последовательности A содержат только заглавные буквы латинского алфавита.\n" +
                       "Среди всех строк из A, имеющих длину L, найти наибольшую (в смысле лексикографического порядка).\n" +
                       "Вывести эту строку или пустую строку, если последовательность не содержит строк длины L.";
            result[10] = "";


            task[11] = "11. Дана последовательность непустых строк. \n" +
                       "Используя метод Aggregate, получить строку, состоящую из начальных символов всех строк исходной последовательности.";
            result[11] = A.Aggregate("Строка: ", (x, y) => x + " _ " + y[0].ToString());



            task[12] = "12. Дана целочисленная последовательность. Найдите произведение последних цифр всех элементов последовательности, используя метод Aggregate. Чтобы избежать целочисленного переполнения, при вычислении произведения используйте вещественный числовой тип.";
            result[12] = "";


            task[13] = "13. Дано целое число N (> 0). Используя методы Range и Sum, найдите сумму ряда 1 + (1/2) + … + (1/N) в виде вещественного числа.";

            //                                  Фильтрация, сортировка, теоретико - множественные операции

            task[14] = "14. Дана целочисленная последовательность. Извлеките из нее все положительные числа, сохраняя их исходный порядок следования, используя методы Where и OrderBy.";
            result[14] = S.ToList().Where(p => p > 0).Aggregate("", (x, y) => x + " " + y);
            foreach (var number in S.Where(p => p > 0))
                result[14] += number + " ";



            task[15] = "15. Дана целочисленная последовательность. Извлечь из нее все нечетные числа, сохранив их исходный порядок следования и удалив все вхождения повторяющихся элементов, кроме первых.";
            result[15] = "";


            task[16] =
                "16. Дана целочисленная последовательность. Извлечь из нее все четные отрицательные числа, поменяв порядок извлеченных чисел на обратный.";
            foreach (var item in S.Where(p => p < 0 && p % 2 == 0))
            {
                result[16] += item + " ";
            }







            task[17] =
                "17. Дана цифра D (целое однозначное число) и целочисленная последовательность A. Извлечь из A все различные положительные числа, оканчивающиеся цифрой D (в исходном порядке).\n" +
                " При наличии повторяющихся элементов удалять все их вхождения, кроме последних. \n" +
                "Указание.Последовательно применить методы Reverse, Distinct, Reverse.";
            result[17] = "";


            task[18] = "18. Дана целочисленная последовательность. Извлечь из нее все положительные двузначные числа, отсортировав их по возрастанию.";
            result[18] = "";


            task[19] = "19. Дана строковая последовательность. Строки последовательности содержат только заглавные буквы латинского алфавита. \n" +
                       "Отсортировать последовательность по возрастанию длин строк, а строки одинаковой длины — в лексикографическом порядке по убыванию.";
            result[19] = "";


            task[20] = "20. Дано целое число K (> 0) и строковая последовательность A. Строки последовательности содержат только цифры и заглавные буквы латинского алфавита. \n" +
                       "Извлечь из A все строки длины K, оканчивающиеся цифрой, отсортировав их в лексикографическом порядке по возрастанию.";
            result[20] = "";


            task[21] = "21. Дано целое число K (> 0) и целочисленная последовательность A. Начиная с элемента A с порядковым номером K, извлечь из A все нечетные двузначные числа, отсортировав их по убыванию.";
            result[21] = "";


            task[22] = "22. Дано целое число K (> 0) и строковая последовательность A. Из элементов A, предшествующих элементу с порядковым номером K, извлечь те строки, которые имеют нечетную длину и начинаются с заглавной латинской буквы, изменив порядок следования извлеченных строк на обратный.";
            result[22] = "";

            task[23] = "23. Даны целые числа K1 и K2 и целочисленная последовательность A; 1 ≤ K1 < K2 ≤ N, где N — размер последовательности A. Найти сумму положительных элементов последовательности с порядковыми номерами от K1 до K2 включительно.";
            result[23] = "";


            task[24] = "24. Даны целые числа K1 и K2 и последовательность непустых строк A; 1 < K1 < K2 ≤ N, где N — размер последовательности A. Найти среднее арифметическое длин всех элементов последовательности, кроме элементов с порядковыми номерами от K1 до K2 включительно, и вывести его как вещественное число.";
            result[24] = "";


            task[25] = "25. Дано целое число D и целочисленная последовательность A. Начиная с первого элемента A, большего D, извлечь из A все нечетные положительные числа, поменяв порядок извлеченных чисел на обратный.";
            result[25] = "";



            task[26] = "26. Дано целое число L (> 0) и последовательность непустых строк A. Строки последовательности содержат только цифры и заглавные буквы латинского алфавита. Из элементов A, предшествующих первому элементу, длина которого превышает L, извлечь строки, оканчивающиеся буквой. Полученную последовательность отсортировать по убыванию длин строк, а строки одинаковой длины — в лексикографическом порядке по возрастанию.";
            result[26] = "";


            task[27] = "27. Даны целые числа D и K (K > 0) и целочисленная последовательность A. Найти теоретико-множественное объединение двух фрагментов A: первый содержит все элементы до первого элемента, большего D (не включая его), а второй — все элементы, начиная с элемента с порядковым номером K. Полученную последовательность (не содержащую одинаковых элементов) отсортировать по убыванию.";
            result[27] = "";


            task[28] = "28. Дано целое число K (> 0) и целочисленная последовательность A. Найти теоретико-множественную разность двух фрагментов A: первый содержит все четные числа, а второй — все числа с порядковыми номерами, большими K. В полученной последовательности (не содержащей одинаковых элементов) поменять порядок элементов на обратный.";
            result[28] = "";


            task[29] = "29. Дано целое число K (> 0) и последовательность непустых строк A. Строки последовательности содержат только цифры и заглавные буквы латинского алфавита. Найти теоретико-множественное пересечение двух фрагментов A: первый содержит K начальных элементов, а второй — все элементы, расположенные после последнего элемента, оканчивающегося цифрой. Полученную последовательность (не содержащую одинаковых элементов) отсортировать по возрастанию длин строк, а строки одинаковой длины — в лексикографическом порядке по возрастанию.";
            result[29] = "";


            //                                                                                          Проецирование

            //Изучаемые методы LINQ: 
            //• Select, SelectMany(проецирование).



            task[30] = "30. Дана последовательность непустых строк A. Получить последовательность символов, каждый элемент которой является начальным символом соответствующей строки из A. Порядок символов должен быть обратным по отношению к порядку элементов исходной последовательности.";
            result[30] = "";


            task[31] = "31. Дана целочисленная последовательность. Обрабатывая только положительные числа, получить последовательность их последних цифр и удалить в полученной последовательности все вхождения одинаковых цифр, кроме первого. Порядок полученных цифр должен соответствовать порядку исходных чисел.";
            result[31] = "";


            task[32] = "32. Дана последовательность положительных целых чисел. Обрабатывая только нечетные числа, получить последовательность их строковых представлений и отсортировать ее в лексикографическом порядке по возрастанию.";
            result[5] = "";


            task[33] = "33. Дана целочисленная последовательность. Получить последовательность чисел, каждый элемент которой равен произведению соответствующего элемента исходной последовательности на его порядковый номер (1, 2, …). В полученной последовательности удалить все элементы, не являющиеся двузначными, и поменять порядок оставшихся элементов на обратный.";
            result[33] = "";


            task[34] = "34. Дана последовательность непустых строк. Получить последовательность символов, которая определяется следующим образом: если соответствующая строка исходной последовательности имеет нечетную длину, то в качестве символа берется первый символ этой строки; в противном случае берется последний символ строки. Отсортировать полученные символы по убыванию их кодов.";

            result[34] = "";

            task[35] = "35. Дана строковая последовательность A. Строки последовательности содержат только заглавные буквы латинского алфавита. Получить новую последовательность строк, элементы которой определяются по соответствующим элементам A следующим образом: пустые строки в новую последовательность не включаются, а к непустым приписывается порядковый номер данной строки в исходной последовательности (например, если пятый элемент A имеет вид «ABC», то в полученной последовательности он будет иметь вид «ABC5»). При нумерации должны учитываться и пустые строки последовательности A. Отсортировать полученную последовательность в лексикографическом порядке по возрастанию. ";
            result[35] = "";


            task[36] = "36. Дана целочисленная последовательность A. Получить новую последовательность чисел, элементы которой определяются по соответствующим элементам последовательности A следующим образом: если порядковый номер элемента A делится на 3 (3, 6, …), то этот элемент в новую последовательность не включается; если остаток от деления порядкового номера на 3 равен 1 (1, 4, …), то в новую последовательность добавляется удвоенное значение этого элемента; в противном случае (для элементов A с номерами 2, 5, …) элемент добавляется в новую последовательность без изменений. В полученной последовательности сохранить исходный порядок следования элементов.";
            result[36] = "";


            task[37] = "37. Дана строковая последовательность A. Получить последовательность цифровых символов, входящих в строки последовательности A (символы могут повторяться). Порядок символов должен соответствовать порядку строк A и порядку следования символов в каждой строке. \n//Указание.Использовать метод SelectMany с учетом того, что строка может интерпретироваться как последовательность символов.";
            result[37] = "";


            task[38] = "38. Дано число K (> 0) и строковая последовательность A. Получить последовательность символов, содержащую символы всех строк из A, имеющих длину, большую или равную K(символы могут повторяться). В полученной последовательности поменять порядок элементов на обратный.";
            result[38] = "";


            task[39] = "39. Дано целое число K (> 0) и строковая последовательность A. Каждый элемент последовательности представляет собой несколько слов из заглавных латинских букв, разделенных символами «.» (точка). Получить последовательность строк, содержащую все слова длины K из элементов A\n//в лексикографическом порядке по возрастанию(слова могут повторяться).";
            result[39] = "";


            task[40] ="40. Дана последовательность непустых строк. Получить последовательность символов, которая определяется следующим образом: для строк с нечетными порядковыми номерами (1, 3, …) в последовательность символов включаются все прописные латинские буквы, содержащиеся в этих строках, а для строк с четными номерами (2, 4, …) — все их строчные латинские буквы. В полученной последовательности символов сохранить их исходный порядок следования";
            result[40] = "";



            task[41] = "41. Дано целое число K (> 0) и последовательность непустых строк A. Получить последовательность символов, которая определяется следующим образом: для первых K элементов последовательности A в новую последовательность заносятся символы, стоящие на нечетных позиция данной строки (1, 3, …), а для остальных элементов A — символы на четных позициях (2, 4, …). В полученной последовательности поменять порядок элементов на обратный.";
            result[41] = "";




            //                                                                                      Объединение и группировка
            //Изучаемые методы LINQ: 
            //• Concat(сцепление);
            //• Join, GroupJoin(объединение);
            //• DefaultIfEmpty(замена пустой последовательности на одноэлементную);
            //• GroupBy(группировка)




            task[42] = "42. Даны целые числа K1 и K2 и целочисленные последовательности A и B. Получить последовательность, содержащую все числа из A, большие K1, и все числа из B, меньшие K2. Отсортировать полученную последовательность по возрастанию.";
            result[42] = "";


            task[43] = "43. Даны целые положительные числа L1 и L2 и строковые последовательности A и B. Строки последовательностей содержат только цифры и заглавные буквы латинского алфавита. Получить последовательность, содержащую все строки из A длины L1 и все строки из B длины L2. Отсортировать полученную последовательность в лексикографическом порядке по убыванию.";
            result[43] = "";


            task[44] = "44. Даны последовательности положительных целых чисел A и B; все числа в каждой последовательности различны. Найти последовательность всех пар чисел, удовлетворяющих следующим условиям: первый элемент пары принадлежит последовательности A, второй принадлежит B, и оба элемента оканчиваются одной и той же цифрой. Результирующая последовательность называется внутренним объединением последовательностей A и B по ключу, определяемому последними цифрами исходных чисел. Представить найденное объединение в виде последовательности строк, содержащих первый и второй элементы пары, разделенные дефисом, например, «49 - 129». Порядок следования пар должен определяться исходным порядком элементов последовательности A, а для равных первых элементов — порядком элементов последовательности B.";
            result[44] = "";



            task[45] = "45. Даны последовательности положительных целых чисел A и B; все числа в каждой последовательности различны. Найти внутреннее объединение A и B (см. 46), пары в котором должны удовлетворять следующему условию: последняя цифра первого элемента пары (из A) должна совпадать с первой цифрой второго элемента пары (из B).\nПредставить найденное объединение в виде последовательности строк, содержащих первый и второй элементы пары, разделенные двоеточием, например, «49:921». Порядок следования пар должен определяться исходным порядком элементов последовательности A, а для равных первых элементов пар — лексикографическим порядком строковых представлений вторых элементов(по возрастанию).";
            result[45] = "";



            task[46] = "46. Даны строковые последовательности A и B; все строки в каждой последовательности различны, имеют ненулевую длину и содержат только цифры и заглавные буквы латинского алфавита. Найти внутреннее объединение A и B (см. 46), каждая пара которого должна содержать строки одинаковой длины.\nПредставить найденное объединение в виде последовательности строк, содержащих первый и второй элементы пары, разделенные двоеточием, например, «AB:CD». Порядок следования пар должен определяться лексикографическим порядком первых элементов пар (по возрастанию), а для равных первых элементов — лексикографическим порядком вторых элементов пар (по убыванию).";
            result[46] = "";



            task[47] = "47. Даны строковые последовательности A, B и С; \n " +
                                   "все строки в каждой последовательности различны, имеют ненулевую длину и содержат только цифры и заглавные буквы латинского алфавита.Найти внутреннее объединение A, B и С(см.46), каждая тройка которого должна содержать строки, начинающиеся с одного и того же символа. \n" +
                                   " Представить найденное объединение в виде последовательности строк вида «EA = EB = EC», где EA, EB, EC — элементы из A, B, C соответственно.Для различных элементов EA сохраняется исходный порядок их следования, для равных элементов \n" +
                                   "EA порядок троек определяется лексикографическим порядком элементов EB(по возрастанию), а для равных элементов EA и EB — лексикографическим порядком элементов EC(по \n" +
                                   "убыванию).";
            result[47] = "";



            task[48] = "48. Даны строковые последовательности A и B; все строки в каждой последовательности различны и имеют ненулевую длину. Получить последовательность строк вида «E:N», где E обозначает один из элементов последовательности A, а N — количество элементов из B, начинающихся с того же символа, что и элемент E (например, «abc:4»); количество N может быть равно 0. Порядок элементов полученной последовательности должен определяться исходным порядком элементов последовательности A. \n" +
                                   "Указание.Использовать метод GroupJoin.";
            result[48] = "";


            task[49] = "49. Даны последовательности положительных целых чисел A и B; все числа в последовательности A различны. Получить последовательность строк вида 'S: E', где S обозначает сумму тех чисел из B, которые оканчиваются на ту же цифру, что и число E — один из элементов последовательности A (например, '74:23'); если для числа E не найдено ни одного подходящего числа из последовательности B, то в качестве S указать 0. Расположить элементы полученной последовательности по возрастанию значений найденных сумм, а при равных суммах — по убыванию значений элементов A.";
            result[49] = "";


            task[50] = "50. Даны строковые последовательности A и B; все строки в каждой последовательности различны, имеют ненулевую длину и содержат только цифры и заглавные буквы латинского алфавита. Получить последовательность всевозможных комбинаций вида 'EA = EB', где EA — некоторый элемент из A, EB — некоторый элемент из B, причем оба элемента оканчиваются цифрой (например, 'AF3 = D78'). Упорядочить полученную последовательность в лексикографическом порядке по возрастанию элементов EA, а при одинаковых элементах EA — в лексикографическом порядке по убыванию элементов EB.";
            result[50] = "";


            task[51] = "51. Даны целочисленные последовательности A и B. Получить последовательность всех различных сумм, в которых первое слагаемое берется из A, а второе из B. Упорядочить полученную последовательность по возрастанию.";
            result[51] = "";



            task[52] = "52. Даны строковые последовательности A и B; все строки в каждой последовательности различны, имеют ненулевую длину и содержат только цифры и заглавные буквы латинского алфавита. Найти последовательность всех пар строк, удовлетворяющих следующим условиям: первый элемент пары принадлежит последовательности A, а второй либо является одним из элементов последовательности B, начинающихся с того же символа, что и первый элемент пары, либо является пустой строкой (если B не содержит ни одной подходящей строки). Результирующая последовательность называется левым внешним объединением последовательностей A и B по ключу, определяемому первыми символами исходных строк. Представить найденное объединение в виде последовательности строк вида «EA.EB», где EA — элемент из A, а EB — либо один из соответствующих ему элементов из B, либо пустая строка. Расположить элементы полученной строковой последовательности в лексикографическом порядке по возрастанию. Указание.Использовать методы GroupJoin, DefaultIfEmpty, Select и SelectMany.";
            result[52] = "";



            task[53] = "53. Даны последовательности положительных целых чисел A и B; все числа в каждой последовательности различны. Найти левое внешнее объединение A и B (см. 54), пары в котором должны удовлетворять следующему условию: оба элемента пары оканчиваются одной и той же цифрой. Представить найденное объединение в виде последовательности строк вида «EA:EB», где EA — число из A, а EB — либо одно из соответствующих ему чисел из B, либо 0 (если в B не содержится чисел, соответствующих EA). Расположить элементы полученной последовательности по убыванию чисел EA, а при одинаковых числах EA — по возрастанию чисел EB.";
            result[53] = "";



            task[54] = "54. Дана целочисленная последовательность A. Сгруппировать элементы последовательности A, оканчивающиеся одной и той же цифрой, и на основе этой группировки получить последовательность строк вида «D: S», где D — ключ группировки\n" +
                                 "т.е.некоторая цифра, которой оканчивается хотя бы одно из чисел последовательности A), а S —\n" +
                                 "сумма всех чисел из A, которые оканчиваются цифрой D.\n" +
                                 "Полученную последовательность упорядочить по возрастанию ключей.\n" +
                                 "Указание.Использовать метод GroupBy.";
            result[54] = "";




            task[55] = "55. Дана целочисленная последовательность. Среди всех элементов последовательности, оканчивающихся одной и той же цифрой, выбрать максимальный. Полученную последовательность максимальных элементов упорядочить по возрастанию их последних цифр.";
            result[55] = "";


            task[56] = "56. Дана последовательность непустых строк. Среди всех строк, начинающихся с одного и того же символа, выбрать наиболее длинную. Если таких строк несколько, то выбрать первую по порядку их следования в исходной последовательности. Полученную последовательность строк упорядочить по возрастанию кодов их начальных символов.";
            result[56] = "";


            task[57] = "57. Дана последовательность непустых строк, содержащих только заглавные буквы латинского алфавита. Среди всех строк одинаковой длины выбрать первую в лексикографическом порядке (по возрастанию). Полученную последовательность строк упорядочить по убыванию их длин.";
            result[57] = "";


            task[58] = "58. Дана последовательность непустых строк A, содержащих только заглавные буквы латинского алфавита. Для всех строк, начинающихся с одной и той же буквы, определить их суммарную длину и получить последовательность строк вида «S-C», где S — суммарная длина всех строк из A, которые начинаются с буквы С. Полученную последовательность упорядочить по убыванию числовых значений сумм, а при равных значениях сумм — по возрастанию кодов символов C.";
            result[58] = "";




        }
        static void Exercise(int id)
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine($"{task[id]}: ");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($" {result[id]}\n");
        }

        static void ShowInitial()
        {
            Console.WriteLine("нажмите любую клавишу чтобы просмотреть следующие задания");
            Console.ReadKey();
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Red;

            Console.WriteLine("Исходные данные");

            Console.Write($"Строка А: ");
            Console.ForegroundColor = ConsoleColor.White;
            foreach (var a in A)
                Console.Write(a + ", ");
            Console.ForegroundColor = ConsoleColor.Red;


            Console.Write($"\nПоследовательность чисел: ");
            Console.ForegroundColor = ConsoleColor.White;
            foreach (var a in S)
                Console.Write(a + " ");
            Console.ForegroundColor = ConsoleColor.Red;


            Console.Write($"\nСимвол С: ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write($"\'{C}'");


            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write($"\nЧисло L:");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write($" {L}");
            Console.ResetColor();


            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write($"\nЧисло D:");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write($" {D}\n\n");
            Console.ResetColor();

        }



    }
}